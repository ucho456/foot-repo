// firestore rules sample
// https://github.com/sgr-ksmt/firebase-ec-demo

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // common functions
    function onlyMe(userId) {
      return request.auth != null && userId == request.auth.uid;
    }

    function newData() {
      return request.resource.data
    }

    function oldData() {
      return resource.data
    }

    function userRef(uid) {
      return /databases/$(database)/documents/users/$(uid)
    }

    function isValidString(v, min, max) {
      return min <= v.size() && v.size() <= max;
    }

    function isValidInt(v, min, max) {
      return min <= v && v <= max;
    }

    function isValidImage(v) {
      return v == null || v.matches('^https?://.+$');
    }

    function isValidSelectTeam (v) {
      return v == 'home' || v == 'away' || v == 'both'
    }

    function isValidPosition (v) {
      return v == 'GK' || v == 'DF' || v == 'MF' || v == 'FW' || v == 'HC' || v == null
    }

    function isValidPoint (v) {
      return v == '' || v == '0.0' || v == '0.5' || v == '1.0' || v == '1.5' || v == '2.0' || v == '2.5' || v == '3.0' || v == '3.5' || v == '4.0' || v == '4.5' || v == '5.0' || v == '6.0' || v == '6.5' || v == '7.0' || v == '7.5' || v == '8.0' || v == '8.5' || v == '9.0' || v == '9.5' || v == '10.0'
    }

    // competitions
    match /competitions/{competitionId} {
      allow read;
      match /scorers/{scorerId} {
        allow read;
      }
      match /standings/{standingId} {
        allow read;
      }
    }

    // matches
    match /matches/{matchId} {
      allow read;
      match /for-report/{forReportId} {
        allow read;
      }
      match /match-detail/{matchDetailId} {
        allow read;
      }
    }

    // reports
    function isValidReport(report) {
      return report.size() == 17
      && 'title' in report && report.title is string
      && 'user' in report && report.user is map
      && 'homeTeam' in report && report.homeTeam is map
      && 'awayTeam' in report && report.awayTeam is map
      && 'competition' in report && report.competition is map
      && 'jstDate' in report && report.jstDate is string
      && 'yearMonth' in report && report.yearMonth is string
      && 'match' in report && report.match is map
      && 'matchday' in report && report.matchday is int
      && 'selectTeam' in report && report.selectTeam is string
      && 'momId' in report && report.momId is string
      && 'summary' in report && report.summary is string
      && 'teamIds' in report && report.teamIds is list
      && 'publish' in report && report.publish is bool
      && 'frozen' in report && report.frozen is bool
      && 'likeCount' in report && report.likeCount is int
      && 'createdAt' in report && report.createdAt is timestamp;
    }

    function isValidReportItem(reportItem) {
      return reportItem.size() == 7
      && 'user' in reportItem && reportItem.user is map
      && 'player' in reportItem && reportItem.player is map
      && 'position' in reportItem && (reportItem.position is string || reportItem.position == null)
      && 'shirtNumber' in reportItem && (reportItem.shirtNumber is int || reportItem.shirtNumber == null)
      && 'point' in reportItem && reportItem.point is string
      && 'text' in reportItem && reportItem.text is string
      && 'order' in reportItem && reportItem.order is int;
    }

    function isValidComment(comment) {
      return comment.size() == 3
      && 'user' in comment && comment.user is map
      && 'text' in comment && comment.text is string
      && 'createdAt' in comment && comment.createdAt is timestamp;
    }

    match /reports/{reportId} {
      allow read;

      allow create: if isValidReport(newData())
      && isValidString(newData().title, 1, 100)
      && (newData().user.id == request.auth.uid || newData().user.id == 'guest')
      && (newData().user.ref == userRef(request.auth.uid) || newData().user.ref == userRef('guest'))
      && isValidString(newData().user.name, 1, 20)
      && isValidImage(newData().user.imageUrl)
      && isValidString(newData().homeTeam.id, 1, 20)
      && exists(newData().homeTeam.ref)
      && isValidString(newData().homeTeam.name, 1, 100)
      && isValidString(newData().homeTeam.shortName, 1, 3)
      && isValidImage(newData().homeTeam.imageUrl)
      && isValidInt(newData().homeTeam.score, 0, 100)
      && isValidString(newData().awayTeam.id, 1, 20)
      && exists(newData().awayTeam.ref)
      && isValidString(newData().awayTeam.name, 1, 100)
      && isValidString(newData().awayTeam.shortName, 1, 3)
      && isValidImage(newData().awayTeam.imageUrl)
      && isValidInt(newData().awayTeam.score, 0, 100)
      && isValidString(newData().competition.id, 1, 20)
      && exists(newData().competition.ref)
      && isValidString(newData().competition.name, 1, 100)
      && isValidString(newData().jstDate, 10, 10)
      && isValidString(newData().yearMonth, 7, 7)
      && isValidString(newData().match.id, 1, 20)
      && exists(newData().match.ref)
      && isValidInt(newData().matchday, 1, 100)
      && isValidSelectTeam(newData().selectTeam)
      && isValidString(newData().momId, 0, 20)
      && isValidString(newData().summary, 0, 300)
      && isValidInt(newData().likeCount, 0, 0);

      allow update: if
      // normal rule
      (request.auth != null
      && userRef(request.auth.uid) == resource.data.user.ref
      && isValidReport(newData())
      && isValidString(newData().title, 1, 100)
      && newData().user.ref == oldData().user.ref
      && newData().user.name == oldData().user.name
      && newData().homeTeam.id == oldData().homeTeam.id
      && newData().homeTeam.ref == oldData().homeTeam.ref
      && newData().homeTeam.name == oldData().homeTeam.name
      && newData().homeTeam.shortName == oldData().homeTeam.shortName
      && newData().homeTeam.imageUrl == oldData().homeTeam.imageUrl
      && newData().homeTeam.score == oldData().homeTeam.score
      && newData().awayTeam.id == oldData().awayTeam.id
      && newData().awayTeam.ref == oldData().awayTeam.ref
      && newData().awayTeam.name == oldData().awayTeam.name
      && newData().awayTeam.shortName == oldData().awayTeam.shortName
      && newData().awayTeam.imageUrl == oldData().awayTeam.imageUrl
      && newData().awayTeam.score == oldData().awayTeam.score
      && newData().competition.id == oldData().competition.id
      && newData().competition.ref == oldData().competition.ref
      && newData().competition.name == oldData().competition.name
      && newData().jstDate == oldData().jstDate
      && newData().yearMonth == oldData().yearMonth
      && newData().match.id == oldData().match.id
      && newData().match.ref == oldData().match.ref
      && newData().matchday == oldData().matchday
      && newData().selectTeam == oldData().selectTeam
      && isValidString(newData().momId, 0, 20)
      && isValidString(newData().summary, 0, 300)
      && newData().likeCount >= 0)
      ||
      // like rule
      (request.auth != null
      && userRef(request.auth.uid) != resource.data.user.ref
      && isValidReport(newData())
      && newData().user.ref == oldData().user.ref
      && newData().user.name == oldData().user.name
      && newData().homeTeam.id == oldData().homeTeam.id
      && newData().homeTeam.ref == oldData().homeTeam.ref
      && newData().homeTeam.name == oldData().homeTeam.name
      && newData().homeTeam.shortName == oldData().homeTeam.shortName
      && newData().homeTeam.imageUrl == oldData().homeTeam.imageUrl
      && newData().homeTeam.score == oldData().homeTeam.score
      && newData().awayTeam.id == oldData().awayTeam.id
      && newData().awayTeam.ref == oldData().awayTeam.ref
      && newData().awayTeam.name == oldData().awayTeam.name
      && newData().awayTeam.shortName == oldData().awayTeam.shortName
      && newData().awayTeam.imageUrl == oldData().awayTeam.imageUrl
      && newData().awayTeam.score == oldData().awayTeam.score
      && newData().competition.id == oldData().competition.id
      && newData().competition.ref == oldData().competition.ref
      && newData().competition.name == oldData().competition.name
      && newData().jstDate == oldData().jstDate
      && newData().yearMonth == oldData().yearMonth
      && newData().match.id == oldData().match.id
      && newData().match.ref == oldData().match.ref
      && newData().matchday == oldData().matchday
      && newData().selectTeam == oldData().selectTeam
      && newData().momId == oldData().momId
      && newData().summary == oldData().summary
      && newData().likeCount >= 0);

      allow delete: if request.auth != null
      && userRef(request.auth.uid) == resource.data.user.ref;

      match /home-team-report-items/{homeTeamReportItemId} {
        allow read;

        allow create: if isValidReportItem(newData())
        && (newData().user.id == request.auth.uid || newData().user.id == 'guest')
        && (newData().user.ref == userRef(request.auth.uid) || newData().user.ref == userRef('guest'))
        && isValidString(newData().player.id, 1, 20)
        && isValidString(newData().player.name, 1, 100)
        && isValidPosition(newData().position)
        && (isValidInt(newData().shirtNumber, 1, 99) || newData().shirtNumber == null)
        && isValidPoint(newData().point)
        && isValidString(newData().text, 0, 140)
        && isValidInt(newData().order, 1, 100);

        allow update: if request.auth != null
        && userRef(request.auth.uid) == resource.data.user.ref
        && isValidReportItem(newData())
        && newData().user.id == oldData().user.id
        && newData().user.ref == oldData().user.ref
        && newData().player.id == oldData().player.id
        && newData().player.name == oldData().player.name
        && newData().position == oldData().position
        && newData().shirtNumber == oldData().shirtNumber
        && isValidPoint(newData().point)
        && isValidString(newData().text, 0, 140)
        && newData().order == oldData().order;
      }
      match /away-team-report-items/{awayTeamReportItemId} {
        allow read;

        allow create: if isValidReportItem(newData())
        && (newData().user.id == request.auth.uid || newData().user.id == 'guest')
        && (newData().user.ref == userRef(request.auth.uid) || newData().user.ref == userRef('guest'))
        && isValidString(newData().player.id, 1, 20)
        && isValidString(newData().player.name, 1, 100)
        && isValidPosition(newData().position)
        && (isValidInt(newData().shirtNumber, 1, 99) || newData().shirtNumber == null)
        && isValidPoint(newData().point)
        && isValidString(newData().text, 0, 140)
        && isValidInt(newData().order, 1, 100);

        allow update: if request.auth != null
        && userRef(request.auth.uid) == resource.data.user.ref
        && isValidReportItem(newData())
        && newData().user.id == oldData().user.id
        && newData().user.ref == oldData().user.ref
        && newData().player.id == oldData().player.id
        && newData().player.name == oldData().player.name
        && newData().position == oldData().position
        && newData().shirtNumber == oldData().shirtNumber
        && isValidPoint(newData().point)
        && isValidString(newData().text, 0, 140)
        && newData().order == oldData().order;
      }
      match /comments/{commentId} {
        allow read;
        allow create: if isValidComment(newData())
        && (newData().user.id == request.auth.uid || newData().user.id == 'guest')
        && (newData().user.ref == userRef(request.auth.uid) || newData().user.ref == userRef('guest'))
        && isValidString(newData().user.name, 1, 20)
        && isValidImage(newData().user.imageUrl)
        && isValidString(newData().text, 1, 140);

        allow delete: if request.auth != null
        && userRef(request.auth.uid) == resource.data.user.ref;
      }
    }

    match /teams/{teamId} {
      allow read;
    }

    // users
    function isValidUser(user) {
      return user.size() == 8
      && 'name' in user && user.name is string
      && 'imageUrl' in user && (user.imageUrl == null || user.imageUrl is string)
      && 'greet' in user && user.greet is string
      && 'competitionId' in user && user.competitionId is string
      && 'team' in user && user.team is map
      && 'reportCount' in user && user.reportCount is int
      && 'followCount' in user && user.followCount is int
      && 'followerCount' in user && user.followerCount is int;
    }

    function isValidLike(like) {
      return like.size() == 2
      && 'report' in like && like.report is map
      && 'createdAt' in like && like.createdAt is timestamp;
    }

    function isValidFollower(follower) {
      return follower.size() == 2
      && 'user' in follower && follower.user is map
      && 'createdAt' in follower && follower.createdAt is timestamp;
    }

    match /users/{userId} {
      allow read;
      allow create: if onlyMe(userId)
      && isValidUser(newData())
      && isValidString(newData().name, 1, 20)
      && isValidImage(newData().imageUrl)
      && isValidString(newData().greet, 0, 140)
      && isValidString(newData().competitionId, 0, 20)
      && isValidString(newData().team.id, 0, 20)
      && isValidString(newData().team.name, 0, 100)
      && newData().reportCount == 0
      && newData().followCount == 0
      && newData().followerCount == 0;

      allow update: if
      // normal rule
      (onlyMe(userId)
      && isValidUser(newData())
      && newData().name == oldData().name
      && newData().imageUrl == oldData().imageUrl
      && isValidString(newData().greet, 0, 140)
      && isValidString(newData().competitionId, 0, 20)
      && isValidString(newData().team.id, 0, 20)
      && isValidString(newData().team.name, 0, 100)
      && newData().reportCount >= 0
      && newData().followCount >= 0
      && newData().followerCount >= 0)
      ||
      // follow rule
      (request.auth != null
      && isValidUser(newData())
      && newData().name == oldData().name
      && newData().imageUrl == oldData().imageUrl
      && newData().greet == oldData().greet
      && newData().competitionId == oldData().competitionId
      && newData().team.id == oldData().team.id
      && newData().team.name == oldData().team.name
      && newData().reportCount == oldData().reportCount
      && newData().followCount >= 0
      && newData().followerCount >= 0);

      match /likes/{likeId} {
        allow read;
        allow create: if onlyMe(userId)
        && isValidLike(newData())
        && isValidString(newData().report.id, 20, 20)
        && exists(newData().report.ref);
        allow delete: if request.auth != null
        && request.auth.uid == userId;
      }
      match /follows/{followId} {
        allow read;
        allow create: if onlyMe(userId)
        && isValidFollower(newData())
        && isValidString(newData().user.id, 1, 100)
        && exists(newData().user.ref)
        && isValidString(newData().user.name, 1, 20)
        && isValidImage(newData().user.imageUrl);
        allow delete: if onlyMe(userId);
      }
      match /followers/{followerId} {
        allow read;
        allow create: if request.auth != null
        && isValidFollower(newData())
        && isValidString(newData().user.id, 1, 100)
        && exists(newData().user.ref)
        && isValidString(newData().user.name, 1, 20)
        && isValidImage(newData().user.imageUrl);
        allow delete: if request.auth != null
        && request.auth.uid == oldData().user.id;
      }
    }
  }
}