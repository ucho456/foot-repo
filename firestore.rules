// firestore rules sample
// https://github.com/sgr-ksmt/firebase-ec-demo

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // common functions
    function onlyMe(userId) {
      return request.auth != null && userId == request.auth.uid;
    }

    function userRef(uid) {
      return /databases/$(database)/documents/users/$(uid)
    }

    function isValidString(v, min, max) {
      return min <= v.size() && v.size() <= max;
    }

    function isValidInt(v, min, max) {
      return min <= v && v <= max;
    }

    function isValidImage(v) {
      return v == null || v.matches('^https?://.+$');
    }

    function isValidSelectTeam (v) {
      return v == 'home' || v == 'away' || v == 'both'
    }

    function isValidPosition (v) {
      return v == 'GK' || v == 'DF' || v == 'MF' || v == 'FW' || v == 'HC' || v == null
    }

    function isValidPoint (v) {
      return v == '' || v == '0.0' || v == '0.5' || v == '1.0' || v == '1.5' || v == '2.0' || v == '2.5' || v == '3.0' || v == '3.5' || v == '4.0' || v == '4.5' || v == '5.0' || v == '6.0' || v == '6.5' || v == '7.0' || v == '7.5' || v == '8.0' || v == '8.5' || v == '9.0' || v == '9.5' || v == '10.0'
    }

    // competitions
    match /competitions/{competitionId} {
      allow read;
      match /scorers/{scorerId} {
        allow read;
      }
      match /standings/{standingId} {
        allow read;
      }
    }

    // matches
    match /matches/{matchId} {
      allow read;
      match /for-report/{forReportId} {
        allow read;
      }
      match /match-detail/{matchDetailId} {
        allow read;
      }
    }

    // reports
    function isValidCreateReport(report) {
      return report.size() == 14
      && 'title' in report && report.title is string
      && 'user' in report && report.user is map
      && 'homeTeam' in report && report.homeTeam is map
      && 'awayTeam' in report && report.awayTeam is map
      && 'competition' in report && report.competition is map
      && 'jstDate' in report && report.jstDate is string
      && 'match' in report && report.match is map
      && 'matchday' in report && report.matchday is int
      && 'selectTeam' in report && report.selectTeam is string
      && 'momId' in report && report.momId is string
      && 'summary' in report && report.summary is string
      && 'teamIds' in report && report.teamIds is list
      && 'publish' in report && report.publish is bool
      && 'createdAt' in report && report.createdAt is timestamp
      && isValidString(report.title, 1, 100)
      && (report.user.ref == userRef(request.auth.uid) || report.user.ref == userRef('guest'))
      && isValidString(report.user.name, 1, 20)
      && isValidImage(report.user.imageUrl)
      && isValidString(report.homeTeam.id, 1, 20)
      && exists(report.homeTeam.ref)
      && isValidString(report.homeTeam.name, 1, 100)
      && isValidString(report.homeTeam.shortName, 1, 3)
      && isValidImage(report.homeTeam.imageUrl)
      && isValidInt(report.homeTeam.score, 0, 100)
      && isValidString(report.awayTeam.id, 1, 20)
      && exists(report.awayTeam.ref)
      && isValidString(report.awayTeam.name, 1, 100)
      && isValidString(report.awayTeam.shortName, 1, 3)
      && isValidImage(report.awayTeam.imageUrl)
      && isValidInt(report.awayTeam.score, 0, 100)
      && isValidString(report.competition.id, 1, 20)
      && exists(report.competition.ref)
      && isValidString(report.competition.name, 1, 20)
      && isValidString(report.jstDate, 10, 10)
      && isValidString(report.match.id, 1, 20)
      && exists(report.match.ref)
      && isValidInt(report.matchday, 1, 100)
      && isValidSelectTeam(report.selectTeam)
      && isValidString(report.momId, 0, 10)
      && isValidString(report.summary, 0, 300);
    }

    function isValidUpdateReport(newReport, oldReport) {
      return newReport.size() == 14
      && 'title' in newReport && newReport.title is string
      && 'user' in newReport && newReport.user is map
      && 'homeTeam' in newReport && newReport.homeTeam is map
      && 'awayTeam' in newReport && newReport.awayTeam is map
      && 'competition' in newReport && newReport.competition is map
      && 'jstDate' in newReport && newReport.jstDate is string
      && 'match' in newReport && newReport.match is map
      && 'matchday' in newReport && newReport.matchday is int
      && 'selectTeam' in newReport && newReport.selectTeam is string
      && 'momId' in newReport && newReport.momId is string
      && 'summary' in newReport && newReport.summary is string
      && 'teamIds' in newReport && newReport.teamIds is list
      && 'publish' in newReport && newReport.publish is bool
      && 'createdAt' in newReport && newReport.createdAt is timestamp
      && isValidString(newReport.title, 1, 100)
      && newReport.user.ref == oldReport.user.ref
      && newReport.user.name == oldReport.user.name
      && newReport.homeTeam.id == oldReport.homeTeam.id
      && newReport.homeTeam.ref == oldReport.homeTeam.ref
      && newReport.homeTeam.name == oldReport.homeTeam.name
      && newReport.homeTeam.shortName == oldReport.homeTeam.shortName
      && newReport.homeTeam.imageUrl == oldReport.homeTeam.imageUrl
      && newReport.homeTeam.score == oldReport.homeTeam.score
      && newReport.awayTeam.id == oldReport.awayTeam.id
      && newReport.awayTeam.ref == oldReport.awayTeam.ref
      && newReport.awayTeam.name == oldReport.awayTeam.name
      && newReport.awayTeam.shortName == oldReport.awayTeam.shortName
      && newReport.awayTeam.imageUrl == oldReport.awayTeam.imageUrl
      && newReport.awayTeam.score == oldReport.awayTeam.score
      && newReport.competition.id == oldReport.competition.id
      && newReport.competition.ref == oldReport.competition.ref
      && newReport.competition.name == oldReport.competition.name
      && newReport.jstDate == oldReport.jstDate
      && newReport.match.id == oldReport.match.id
      && newReport.match.ref == oldReport.match.ref
      && newReport.matchday == oldReport.matchday
      && isValidSelectTeam(newReport.selectTeam)
      && isValidString(newReport.momId, 0, 10)
      && isValidString(newReport.summary, 0, 300);
    }

    function isValidCreateReportItem(reportItem) {
      return reportItem.size() == 6
      && 'player' in reportItem && reportItem.player is map
      && 'position' in reportItem && (reportItem.position is string || reportItem.position == null)
      && 'shirtNumber' in reportItem && (reportItem.shirtNumber is int || reportItem.shirtNumber == null)
      && 'point' in reportItem && reportItem.point is string
      && 'text' in reportItem && reportItem.text is string
      && 'order' in reportItem && reportItem.order is int
      && isValidString(reportItem.player.id, 1, 10)
      && isValidString(reportItem.player.name, 1, 100)
      && isValidPosition(reportItem.position)
      && (isValidInt(reportItem.shirtNumber, 1, 99) || reportItem.shirtNumber == null)
      && isValidPoint(reportItem.point)
      && isValidString(reportItem.text, 0, 140)
      && isValidInt(reportItem.order, 1, 30);
    }

    function isValidUpdateReportItem(newReportItem, oldReportItem) {
      return newReportItem.size() == 6
      && 'player' in newReportItem && newReportItem.player is map
      && 'position' in newReportItem && (newReportItem.position is string || newReportItem.position == null)
      && 'shirtNumber' in newReportItem && (newReportItem.shirtNumber is int || newReportItem.shirtNumber == null)
      && 'point' in newReportItem && newReportItem.point is string
      && 'text' in newReportItem && newReportItem.text is string
      && 'order' in newReportItem && newReportItem.order is int
      && newReportItem.player.id == oldReportItem.player.id
      && newReportItem.player.name == oldReportItem.player.name
      && newReportItem.position == oldReportItem.position
      && newReportItem.shirtNumber == oldReportItem.shirtNumber
      && isValidPoint(newReportItem.point)
      && isValidString(newReportItem.text, 0, 140)
      && newReportItem.order == oldReportItem.order;
    }

    function isValidComment(comment) {
      return comment.size() == 3
      && 'user' in comment && comment.user is map
      && 'text' in comment && comment.text is string
      && 'createdAt' in comment && comment.createdAt is timestamp
      && (comment.user.ref == userRef(request.auth.uid) || comment.user.ref == userRef('guest'))
      && isValidString(comment.user.name, 1, 20)
      && isValidImage(comment.user.imageUrl)
      && isValidString(comment.text, 1, 140);
    }

    match /reports/{reportId} {
      allow read;
      allow create: if isValidCreateReport(request.resource.data);
      allow update: if request.auth != null
      && userRef(request.auth.uid) == resource.data.user.ref
      && isValidUpdateReport(request.resource.data, resource.data);
      allow delete: if request.auth != null
      && userRef(request.auth.uid) == resource.data.user.ref;
      match /home-team-report-items/{homeTeamReportItemId} {
        allow read;
        allow create: if isValidCreateReportItem(request.resource.data)
        allow update: if isValidUpdateReportItem(request.resource.data, resource.data);
      }
      match /away-team-report-items/{awayTeamReportItemId} {
        allow read;
        allow create: if isValidCreateReportItem(request.resource.data)
        allow update: if isValidUpdateReportItem(request.resource.data, resource.data);
      }
      match /comments/{commentId} {
        allow read;
        allow create: if isValidComment(request.resource.data);
      }
    }

    match /teams/{teamId} {
      allow read;
    }

    // users
    function isValidCreateUser(user) {
      return user.size() == 5
      && 'name' in user && user.name is string
      && 'imageUrl' in user && (user.imageUrl == null || user.imageUrl is string)
      && 'greet' in user && user.greet is string
      && 'competitionId' in user && user.competitionId is string
      && 'team' in user && user.team is map
      && isValidString(user.name, 1, 20)
      && isValidImage(user.imageUrl)
      && isValidString(user.greet, 0, 140)
      && isValidString(user.competitionId, 0, 20)
      && isValidString(user.team.id, 0, 20)
      && isValidString(user.team.name, 0, 100);
    }

    function isValidUpdateUser(newUser, oldUser) {
      return newUser.size() == 5
      && 'name' in newUser && newUser.name is string
      && 'imageUrl' in newUser && (newUser.imageUrl == null || newUser.imageUrl is string)
      && 'greet' in newUser && newUser.greet is string
      && 'competitionId' in newUser && newUser.competitionId is string
      && 'team' in newUser && newUser.team is map
      && newUser.name == oldUser.name
      && newUser.imageUrl == oldUser.imageUrl
      && isValidString(newUser.greet, 0, 140)
      && isValidString(newUser.competitionId, 0, 20)
      && isValidString(newUser.team.id, 0, 20)
      && isValidString(newUser.team.name, 0, 100);
    }

    match /users/{userId} {
      allow read;
      allow create: if onlyMe(userId)
      && isValidCreateUser(request.resource.data);
      allow update: if onlyMe(userId)
      && isValidUpdateUser(request.resource.data, resource.data);
    }
  }
}